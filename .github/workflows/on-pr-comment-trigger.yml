name: Check new comment for commands

on:
  issue_comment:
    types: [created, edited]

env:
  TARGET_CHERRY_PICK_BRANCH: cherry-pick-base
  BASE_BRANCH: master

jobs:
  setup_env:
    # This job only runs for pull request comments
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Store the branch name in an environment variable called BRANCH_NAME
      - name: set env
        id: setup
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const curPRNumber = parseInt(context.payload.issue.pull_request.url.split('/').pop());
            const curPR = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: curPRNumber
            });
            const branchName = curPR.data.head.ref;
            console.info("Working on branch", branchName);
            core.setOutput('BRANCH_NAME', branchName);
    outputs:
      BRANCH_NAME: ${{ steps.setup.outputs.BRANCH_NAME }}

  notify-start:
    needs: [setup_env]
    # This job only runs for pull request comments
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: notify command
        uses: actions/github-script@v3
        with:
          script: |
            const commentBody = context.payload.comment.body;
            const commandToRunList = [];
            if (commentBody.includes('command--joke')) {
              commandToRunList.push('joke');
            }
            if (commentBody.includes('command--random-sum')) {
              commandToRunList.push('random-sum');
            }
            if (commentBody.includes('command--cherry-pick')) {
              commandToRunList.push('cherry-pick');
            }

            if (commandToRunList.length === 0) {
              return;
            }

            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const commentType = "Running command";
            const body = `
              **${commentType}** ðŸ§ª Starting...
              ${commandToRunList.map(command => `- ${command}`).join('\n')}
            `
            const comment = await github.issues.createComment({
              issue_number,
              owner,
              repo,
              body
            });

  run_commands:
    # This job only runs for pull request comments
    if: ${{ github.event.issue.pull_request }}
    needs: [setup_env, notify-start]
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ needs.setup_env.outputs.BRANCH_NAME }}
    steps:
      - uses: actions/checkout@v2

      - name: run joke
        if: contains(github.event.comment.body, 'command--joke')
        run: npm run joke

      - name: run random sum
        if: contains(github.event.comment.body, 'command--random-sum')
        run: npm run random-sum

      - name: cherry-pick
        if: contains(github.event.comment.body, 'command--cherry-pick')
        # Cherry pick all the commits in the current branch to a new branch named `<cur-branch-name>--cherry-pick` `cherry-pick` branch
        # All the commits are taken from the current branch
        run: |
          echo "BRANCH_NAME=${BRANCH_NAME}"

          git fetch origin $BASE_BRANCH

          git fetch origin $BRANCH_NAME
          git checkout $BRANCH_NAME

          git fetch origin $TARGET_CHERRY_PICK_BRANCH
          git checkout $TARGET_CHERRY_PICK_BRANCH

          git checkout -b $BRANCH_NAME--cherry-pick
          echo "Cherry picking from commit $(git merge-base $BASE_BRANCH $BRANCH_NAME) to commit $BRANCH_NAME"
          git cherry-pick $(git merge-base $BASE_BRANCH $BRANCH_NAME)..$BRANCH_NAME
          git push origin $BRANCH_NAME--cherry-pick

      - name: cherry-pick pr creation
        if: contains(github.event.comment.body, 'command--cherry-pick')
        uses: actions/github-script@v3
        with:
          script: |
            const prBranchName = process.env.BRANCH_NAME;
            const commentBody = context.payload.comment.body;
            const prTitle = `Cherry pick from ${prBranchName} to ${context.payload.pull_request.base.ref}`;
            const prBody = `
            This PR is created to cherry pick all the commits from ${prBranchName} to ${context.payload.pull_request.base.ref}.
            `;
            const pr = await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              head: `${prBranchName}--cherry-pick`,
              base: "master",
              body: prBody
            });
            const commentType = "Cherry picking PR";
            const body = `
            **${commentType}** âœ… Done!
            You can checkout the run result at [PR](${pr.data.html_url})
            `;
            const comment = await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      # Intentionally create a new comment to trigger notification
      #   since test can take a long time to run
      - name: report error
        # Run when any of the command fails
        if: always() && failure()
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runId = context.runId;
            const baseUrl = context.payload.repository.html_url;

            const commentType = "Running command";
            const body = `
            **${commentType}** ðŸš« Failed
            You can checkout the run result at [Actions](${baseUrl}/actions/runs/${runId})
            `;
            const comment = await github.issues.createComment({
              issue_number,
              owner,
              repo,
              body
            });

  notify_end:
    needs: [run_commands]
    # This job only runs for pull request comments
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: notify done
        uses: actions/github-script@v3
        with:
          script: |
            const commentBody = context.payload.comment.body;
            const commandToRunList = [];
            if (commentBody.includes('command--joke')) {
              commandToRunList.push('joke');
            }
            if (commentBody.includes('command--random-sum')) {
              commandToRunList.push('random-sum');
            }
            if (commentBody.includes('command--cherry-pick')) {
              commandToRunList.push('cherry-pick');
            }

            if (commandToRunList.length === 0) {
              return;
            }

            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runId = context.runId;
            const baseUrl = context.payload.repository.html_url;

            const commentType = "Running command";
            const body = `
            **${commentType}** âœ… Done!
            You can checkout the run result at [Actions](${baseUrl}/actions/runs/${runId})
            `;
            const comment = await github.issues.createComment({
              issue_number,
              owner,
              repo,
              body
            });
